#!/usr/bin/env ruby

rackup = lambda do |file|
  raise "#{file} does not exist" if !File.file?(file)

  class << builder = Object.new
    def method_missing(*args, &block)
      (@_method_calls ||= []) << [args, block]
      nil
    end
  end

  builder.instance_eval(File.read(file), file)
  method_calls = builder.instance_variable_get(:@_method_calls)

  require 'rack'
  Rack::Builder.new do
    method_calls.each { |args, block| send(*args, &block) }
  end.to_app
end

if GC.respond_to?(:copy_on_write_friendly=)
  GC.copy_on_write_friendly = true
end

app = rackup.call(ARGV[0])

require 'unicorn'
Unicorn.run app, {
  :preload_app => true,
  :listeners   => ["0.0.0.0:0"],
  :after_fork  => lambda do |server, worker|
    if defined? ActiveRecord::Base
      ActiveRecord::Base.establish_connection
    end
  end
}
